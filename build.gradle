buildscript {
   ext.kotlin_version = '1.3.61'
   ext.arrow_version = '0.10.3'
   ext.isGithub = System.getenv("GITHUB_ACTIONS") == "true"
   ext.githubBuildNumber = System.getenv("BUILD_NUMBER")
   ext.isRelease = !isGithub
   ext.JUnitPlatformVersion = "1.5.1"
   ext.junitJupiterVersion = "5.5.1"
   ext.dokkaVersion = '0.10.1'
   ext.coroutinesVersion = "1.3.0"
   ext.argparse4jVersion = "0.8.1"
   ext.mockkVersion = "1.9.3"
   ext.ktorVersion = "1.2.3"
   ext.mordantVersion = "1.2.1"
   ext.slf4jVersion = "1.7.28"
   ext.classgraphVersion = "4.8.47"
   ext.jsonPathVersion = "2.4.0"
   repositories {
      mavenCentral()
      mavenLocal()
   }

   dependencies {
      classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
      classpath 'com.android.tools.build:gradle:3.5.3'
      //    classpath "io.kotest:kotest-gradle-plugin:1.1.1-LOCAL"
   }

   repositories {
      mavenCentral()
      google()
   }
}

plugins {
   id 'java'
   id 'org.jetbrains.kotlin.multiplatform' version '1.3.61'
   id 'java-library'
   id 'maven-publish'
   id 'signing'
   id 'net.researchgate.release' version '2.8.0'
   id 'com.adarshr.test-logger' version '2.0.0'
   id 'io.qameta.allure' version "2.8.1"
}

// apply plugin: "io.kotest"

allprojects {

   repositories {
      mavenCentral()
      jcenter()
      google()
   }

   apply plugin: 'io.qameta.allure'

   allure {
      version = '2.13.1'
   }

   sourceCompatibility = 1.8
   targetCompatibility = 1.8

   group = "io.kotest"

   if (isGithub) {
      version "4.0.0." + githubBuildNumber + "-SNAPSHOT"
   }

   release {
      failOnCommitNeeded = false
      failOnPublishNeeded = false
      failOnUnversionedFiles = false
   }

   afterReleaseBuild.dependsOn publish
}

import io.qameta.allure.gradle.task.AllureReport

task allureAggregatedReport(type: AllureReport) {
   resultsDirs = subprojects.allure.resultsDir
}

dependencies {
   compile "org.jetbrains.kotlin:kotlin-stdlib"
}

project(":") {
   publish.enabled = false
}
